name: Windows

on:
    workflow_dispatch:
        inputs:
            developer_build:
                description: "Set to OFF for Release wheels"
                required: false
                default: "ON"

    push:
        branches:
            - master
    pull_request:
        types: [opened, reopened, synchronize] # Rebuild on new pushes to PR

concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: true

env:
    PIP_VER: "21.1.1"
    WHEEL_VER: "0.35.1"
    STOOLS_VER: "50.3.2"
    PYTEST_VER: "6.0.1"
    PYTEST_RANDOMLY_VER: "3.8.0"
    SCIPY_VER: "1.5.4"
    JEDI_VER: "0.17.2" # https://github.com/ipython/ipython/issues/12740
    IDNA_VER: "2.8" # https://github.com/psf/requests/issues/5710
    CONDA_BUILD_VER: "3.21.4"
    SRC_DIR: "D:\\a\\open3d\\open3d"
    BUILD_DIR: "C:\\Open3D\\build"
    NPROC: 2
    DEVELOPER_BUILD: ${{ github.event.inputs.developer_build || 'ON' }}

jobs:
    windows:
        runs-on: windows-latest
        strategy:
            fail-fast: false
            matrix:
                SHARED: [ON, OFF]
                STATIC_RUNTIME: [ON, OFF]
                BUILD_CUDA: [ON, OFF]
                CONFIG: [Release, Debug]
                exclude:
                    - SHARED: ON
                      STATIC_RUNTIME: ON
                include:
                    - BUILD_CUDA: ON
                      CUDA_VERSION: 11.0.3
        env:
            BUILD_WEBRTC: ${{ ( matrix.SHARED == 'OFF' && matrix.STATIC_RUNTIME == 'ON' ) && 'ON' || 'OFF' }}

        steps:
            - name: Disk space used
              run: Get-PSDrive

            - name: Install CUDA
              if: ${{ matrix.BUILD_CUDA == 'ON' }}
              run: |
                  # Define variables
                  $CUDA_VER_FULL = "${{ matrix.CUDA_VERSION }}"
                  $CUDA_VER_ARR = $CUDA_VER_FULL.Split(".")
                  $CUDA_VER = "$($CUDA_VER_ARR[0]).$($CUDA_VER_ARR[1])"
                  $CUDA_VER_ID = "$($CUDA_VER_ARR[0])_$($CUDA_VER_ARR[1])"
                  # Installer url
                  if ( $CUDA_VER_ARR[0] -ge 11 ) {
                    $CUDA_URL = "http://developer.download.nvidia.com/compute/cuda/$CUDA_VER_FULL/network_installers/cuda_$($CUDA_VER_FULL)_win10_network.exe"
                  } else {
                    $CUDA_URL = "http://developer.download.nvidia.com/compute/cuda/$CUDA_VER/Prod/network_installers/cuda_$($CUDA_VER_FULL)_win10_network.exe"
                  }
                  # Installer arguments
                  $CUDA_INSTALL_ARGS = "-s"
                  # Required packages
                  $CUDA_PACKAGES = "nvcc", "visual_studio_integration", "cublas", "cublas_dev", "cudart", "cusolver", "cusolver_dev", "npp", "npp_dev"
                  $CUDA_PACKAGES.ForEach({ $CUDA_INSTALL_ARGS += " $($_)_$($CUDA_VER)" })
                  # Download and install CUDA
                  echo "Downloading CUDA installer from $CUDA_URL"
                  Invoke-WebRequest $CUDA_URL -OutFile cuda.exe
                  echo "Installing CUDA..."
                  Start-Process -Wait -FilePath .\cuda.exe -ArgumentList "$CUDA_INSTALL_ARGS"
                  if ( !$? ) {
                    exit 1
                  }
                  # Add CUDA environment variables.
                  $CUDA_PATH = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v$CUDA_VER"
                  echo "CUDA_PATH=$CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                  echo "CUDA_PATH_V$CUDA_VER_ID=$CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                  echo "$CUDA_PATH\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

            - name: Checkout source code
              uses: actions/checkout@v2

            - name: Set up Python version
              uses: actions/setup-python@v2
              with:
                  python-version: 3.6

            - name: Config
              # Move build directory to C: https://github.com/actions/virtual-environments/issues/1341
              run: |
                  $ErrorActionPreference = 'Stop'
                  New-Item -Path ${{ env.BUILD_DIR }} -ItemType Directory
                  cd ${{ env.BUILD_DIR }}
                  if (${env:DEVELOPER_BUILD} -ne "OFF") {
                    ${env:DEVELOPER_BUILD}="ON"
                  }
                  cmake -G "Visual Studio 16 2019" -A x64 `
                    -DDEVELOPER_BUILD="${env:DEVELOPER_BUILD}" `
                    -DBUILD_EXAMPLES=OFF `
                    -DCMAKE_INSTALL_PREFIX="C:\Program Files\Open3D" `
                    -DBUILD_SHARED_LIBS=${{ matrix.SHARED }} `
                    -DSTATIC_WINDOWS_RUNTIME=${{ matrix.STATIC_RUNTIME }} `
                    -DBUILD_COMMON_ISPC_ISAS=ON `
                    -DBUILD_LIBREALSENSE=ON `
                    -DBUILD_WEBRTC=${{ env.BUILD_WEBRTC }} `
                    -DBUILD_UNIT_TESTS=ON `
                    -DBUILD_CUDA_MODULE=${{ matrix.BUILD_CUDA }} `
                    ${{ env.SRC_DIR }}

            - name: Build
              working-directory: ${{ env.BUILD_DIR }}
              run: |
                  $ErrorActionPreference = 'Stop'
                  cmake --build . --parallel ${{ env.NPROC }} --config ${{ matrix.CONFIG }} `
                    --target build-examples-iteratively
                  cmake --build . --parallel ${{ env.NPROC }} --config ${{ matrix.CONFIG }} `
                    --target INSTALL

            - name: Package
              working-directory: ${{ env.BUILD_DIR }}
              if: ${{ matrix.SHARED == 'ON' && matrix.BUILD_CUDA == 'ON' }}
              run: |
                  $ErrorActionPreference = 'Stop'
                  cmake --build . --parallel ${{ env.NPROC }} --config ${{ matrix.CONFIG }} `
                    --target package
                  if ("${{ matrix.CONFIG }}" -eq "Debug") {
                      Get-ChildItem package/open3d-devel-*.zip | Rename-Item -NewName `
                          {$_.name -Replace '.zip','-dbg.zip'}
                  }
                  $DEVEL_PKG_NAME=(Get-ChildItem package/open3d-devel-*.zip).Name
                  echo "DEVEL_PKG_NAME=$DEVEL_PKG_NAME" | Out-File -FilePath `
                    $env:GITHUB_ENV -Encoding utf8 -Append

            - name: Upload package
              if: ${{ matrix.SHARED == 'ON' && matrix.BUILD_CUDA == 'ON' }}
              uses: actions/upload-artifact@v2
              with:
                  name: open3d-devel-windows
                  path: ${{ env.BUILD_DIR }}/package/${{ env.DEVEL_PKG_NAME }}
                  if-no-files-found: error
